import Head from "next/head";
import Image from "next/image";
import cloud from "../public/images/cloud.png";
import { AiOutlineSearch } from "react-icons/ai";
import { AiOutlineCalendar, AiOutlineEnvironment } from "react-icons/ai";
import { FiSun } from "react-icons/fi";
import { BsSnow } from "react-icons/bs";
import { FaTemperatureLow } from "react-icons/fa";
import { MdOutlineWaterDrop } from "react-icons/md";
import { useState } from "react";

const Home = () => {
  const [search, setSearch] = useState("");
  const [data, setData] = useState([]);
  const [selecteditem, setSelecteditem] = useState(0)
  const [forecastWeather, setForecastWeather] = useState();

  const api_id = "3919a4f6618cbf053146c924b0d7cd3c";
  const api_url = `https://api.openweathermap.org/`;

  const handleChange = async (value) => {
    setSearch(value);
    if (!value) {
      setData([]);
      return;
    }

    const res = await fetch(
      `${api_url}geo/1.0/direct?q=${value}&limit=5&appid=${api_id}`
    );
    const json = await res.json();

    function filter(arr) {
      const a = [];
      const filtered = arr.filter((e) => {
        if (!a.includes(e.state)) {
          a.push(e.state);
          return true;
        } else return false;
      });
      return filtered;
    }

    const filteredData = filter(json);
    setData(filteredData);
    setSelecteditem(0)
  };

  const handleSubmit = async (lat, lon) => {
    if (!data.length > 0) return;

    if (!lat) {
      lat = data[selecteditem].lat;
      lon = data[selecteditem].lon;
    }
    setSearch("");
    setData([]);
    setSelecteditem(0)

    const res = await fetch(
      `${api_url}data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${api_id}`
    );
    const js = await res.json();
    setForecastWeather(js);
  };

  const handleKeyDown = (value)=> {
    if (value !== "ArrowUp" && value !== "ArrowDown") return

    if (value === "ArrowUp") {
      if (data[selecteditem -1]) {
        setSelecteditem(prev=> prev -1)
      } else {
        setSelecteditem(data.length -1)
      }
      return
    }

    if (value === "ArrowDown") {
      if (data[selecteditem +1]) {
        setSelecteditem(prev=> prev +1)
      } else {
        setSelecteditem(0)
      }
    }
  }

  const weekDays = [
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
    "Sunday",
  ];

  const currentDay = new Date().getDay();
  const forecastDays = weekDays
    .slice(currentDay, weekDays.length)
    .concat(weekDays.slice(0, currentDay));

  return (
    <div className="bg-black min-vh-100 pb-5">
      <Head>
        <title>Weather App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header className="container d-flex flex-column flex-md-row justify-content-md-between align-items-center pt-4 mb-4">
        <div className="d-flex align-items-center" onClick={e=> setForecastWeather()} role="button">
          <Image className="me-3" src={cloud} width={60} height={60} alt="" />
          <h3>Weather App</h3>
        </div>
        <form
          className="d-flex mt-3 mt-md-0"
          onSubmit={(e) => e.preventDefault()}
        >
          <div className="me-1 position-relative">
            <input
              className="form-control rounded-0"
              type="search"
              placeholder="Search City"
              aria-label="Search"
              onChange={(e) => handleChange(e.target.value)}
              value={search}
              onKeyDown={e=> handleKeyDown(e.key)}
            />
            <ul className="list-group list-group-flush position-absolute top-100">
              {data.length > 0 &&
                data.map((location, i) => {
                  const text = `${location.name}, ${location.country} `;
                  const className =
                    i === selecteditem
                      ? `text-dark list-group-item search-result-element-active`
                      : "text-dark list-group-item";

                  return (
                    <li
                      key={i}
                      className={className}
                      role="button"
                      onClick={() => {
                        const lat = location.lat;
                        const lon = location.lon;

                        handleSubmit(lat, lon);
                      }}
                    >
                      {location.state ? text + `${location.state}` : text}
                    </li>
                  );
                })}
            </ul>
          </div>
          <button
            onClick={() => handleSubmit()}
            className="btn btn-secondary align-self-start"
          >
            <AiOutlineSearch />
          </button>
        </form>
      </header>

      {forecastWeather ? (
        <div className="container">
          <h4 className="mb-3 container">5 Days forecast</h4>
          <main className="container">
            <div className="row">
              <section className="col-md-4 col-lg-3">
                <div className="bg-dark p-3 p-sm-4 rounded-4">
                  <ul>
                    {forecastWeather.list.slice(0, 5).map((forecast, i) => {
                      const icon = forecast.weather[0].icon;
                      const temp = Math.round(forecast.main.temp - 272.15);
                      const className =
                        i === 0
                          ? "d-flex align-items-center justify-content-between"
                          : "d-flex align-items-center mt-4 justify-content-between";

                      return (
                        <li className={className} key={i}>
                          <div className="col">
                            <Image
                              src={`/images/weather_icons/${icon}.png`}
                              alt=""
                              width={36}
                              height={36}
                            />
                            <span className="ms-2">
                              <p className="d-inline">
                                {temp}
                                <sup>C</sup>
                              </p>
                            </span>
                          </div>
                          <p className="text-secondary">
                            {forecastDays[0 + i]}
                          </p>
                        </li>
                      );
                    })}
                  </ul>
                </div>
              </section>

              <section className="col-md-8 col-lg-9 mt-4 mt-md-0">
                <div className="bg-dark p-4 rounded-4 d-flex flex-column flex-lg-row">
                  <div className="me-lg-5">
                    <h5>{forecastWeather.city.name}</h5>
                    <div className="d-flex ">
                      <p className="fs-1 fw-bold me-5 pe-5">
                        {Math.round(forecastWeather.list[0].main.temp - 272.15)}
                        &deg;<sup>c</sup>
                      </p>
                      <Image
                        src={`/images/weather_icons/${forecastWeather.list[0].weather[0].icon}.png`}
                        alt=""
                        width={64}
                        height={64}
                      />
                    </div>

                    <p className="border-bottom border-secondary pb-3 mb-2">
                      {forecastWeather.list[0].weather[0].description}
                    </p>
                    <ul>
                      <li className="d-flex align-items-center">
                        <AiOutlineCalendar className="me-2" />
                        <p className="text-secondary">Thursday 16, Feb</p>
                      </li>

                      <li className="d-flex align-items-center">
                        <AiOutlineEnvironment className="me-2" />
                        <p className="text-secondary">
                          {forecastWeather.city.name},{" "}
                          {forecastWeather.city.country}{" "}
                        </p>
                      </li>
                    </ul>
                  </div>

                  <div className="d-flex w-100 flex-wrap justify-content-around align-items-center mt-4 mt-lg-0 gap-3">
                    
                    <div className="d-flex align-items-center flex-grow px-3 px-lg-0 px-xl-4 px-xxl-5">
                      <FiSun className="fs-1 me-3" />
                      <div>
                        <p>Max Temp</p>
                        <p className="fs-2 fw-medium">
                          {Math.round(
                            forecastWeather.list[0].main.temp_max - 272.15
                          ) + 3}
                          <sup>c</sup>
                        </p>
                      </div>
                    </div>

                    <div className="d-flex align-items-center flex-grow px-3 px-lg-0 px-xl-4 px-xxl-5">
                      <BsSnow className="fs-1 me-3" />
                      <div>
                        <p>Min Temp</p>
                        <p className="fs-2 fw-medium">
                          {Math.round(
                            forecastWeather.list[0].main.temp_min - 272.15
                          ) - 4}
                          <sup>c</sup>
                        </p>
                      </div>
                    </div>

                    <div className="d-flex align-items-center flex-grow px-4 px-lg-0 px-xl-4 px-xxl-5">
                      <FaTemperatureLow className="fs-1 me-3" />
                      <div>
                        <p>Feels like</p>
                        <p className="fs-2 fw-medium">
                          {Math.round(
                            forecastWeather.list[0].main.feels_like - 272.15
                          )}
                          <sup>c</sup>
                        </p>
                      </div>
                    </div>

                    <div className="d-flex align-items-center flex-grow px-3 px-lg-0 px-xl-4 px-xxl-5">
                      <MdOutlineWaterDrop className="fs-1 me-3" />
                      <div>
                        <p>Humidity</p>
                        <p className="fs-2 fw-medium">
                          {forecastWeather.list[0].main.humidity}%
                        </p>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="mt-4">
                  <h4>14 days forecast</h4>
                  <ul className="d-flex mt-2 gap-2 overflow-auto">
                    {forecastWeather.list.slice(0, 14).map((forecast, i) => {
                      const days = forecastDays.concat(forecastDays);
                      const icon = forecast.weather[0].icon;
                      const temp = Math.round(forecast.main.temp - 272.15);
                      return (
                        <li className="bg-dark rounded-4 py-3 px-4 d-flex flex-column scale-1" role="button" key={i}>
                          <p className="text-center">{days[i]}</p>
                          <Image
                            className="align-self-center"
                            alt=""
                            src={`/images/weather_icons/${icon}.png`}
                            width={48}
                            height={48}
                          />
                          <p className="text-center">
                            {temp}
                            <sup>c</sup>
                          </p>
                        </li>
                      );
                    })}
                  </ul>
                </div>
              </section>
            </div>
          </main>
        </div>
      ) : (
        <div className="container">
          <div className="d-flex flex-column">
            <div className="align-self-center img-logo">
              <img src="/images/cloud.png" className="w-100" />
            </div>
            
            <p className="align-self-center text-logo">Weather app</p>
          </div>
          
        </div>
      )}
    </div>
  );
};

export default Home;
